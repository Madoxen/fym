[{"/home/zmielone/fymate-configs/fymate/client/src/index.tsx":"1","/home/zmielone/fymate-configs/fymate/client/src/store.ts":"2","/home/zmielone/fymate-configs/fymate/client/src/App.tsx":"3","/home/zmielone/fymate-configs/fymate/client/src/features/auth/reducers.ts":"4","/home/zmielone/fymate-configs/fymate/client/src/pages/About.tsx":"5","/home/zmielone/fymate-configs/fymate/client/src/pages/Register.tsx":"6","/home/zmielone/fymate-configs/fymate/client/src/pages/Profile.tsx":"7","/home/zmielone/fymate-configs/fymate/client/src/components/Navigation.tsx":"8","/home/zmielone/fymate-configs/fymate/client/src/pages/Login.tsx":"9","/home/zmielone/fymate-configs/fymate/client/src/pages/AddPost.tsx":"10","/home/zmielone/fymate-configs/fymate/client/src/pages/Home.tsx":"11","/home/zmielone/fymate-configs/fymate/client/src/features/auth/types.ts":"12","/home/zmielone/fymate-configs/fymate/client/src/features/counter/index.ts":"13","/home/zmielone/fymate-configs/fymate/client/src/features/counter/actionTypes.ts":"14","/home/zmielone/fymate-configs/fymate/client/src/features/counter/selectors.ts":"15","/home/zmielone/fymate-configs/fymate/client/src/features/counter/counterReducer.ts":"16","/home/zmielone/fymate-configs/fymate/client/src/components/loginModal/LoginModal.tsx":"17","/home/zmielone/fymate-configs/fymate/client/src/components/Profile/EditProfile.tsx":"18","/home/zmielone/fymate-configs/fymate/client/src/components/search/PostBoard.tsx":"19","/home/zmielone/fymate-configs/fymate/client/src/components/search/Board.tsx":"20","/home/zmielone/fymate-configs/fymate/client/src/components/tags/TagPanel.tsx":"21","/home/zmielone/fymate-configs/fymate/client/src/components/search/Post.tsx":"22","/home/zmielone/fymate-configs/fymate/client/src/components/search/UserBoard.tsx":"23","/home/zmielone/fymate-configs/fymate/client/src/components/tags/TagList.tsx":"24","/home/zmielone/fymate-configs/fymate/client/src/components/search/UserCard.tsx":"25","/home/zmielone/fymate-configs/fymate/client/src/pages/EditPost.tsx":"26"},{"size":308,"mtime":1610217234760,"results":"27","hashOfConfig":"28"},{"size":494,"mtime":1610217234770,"results":"29","hashOfConfig":"28"},{"size":1023,"mtime":1610381282510,"results":"30","hashOfConfig":"28"},{"size":1668,"mtime":1610217234760,"results":"31","hashOfConfig":"28"},{"size":681,"mtime":1608725962360,"results":"32","hashOfConfig":"28"},{"size":2926,"mtime":1610217234770,"results":"33","hashOfConfig":"28"},{"size":2335,"mtime":1610381670170,"results":"34","hashOfConfig":"28"},{"size":1158,"mtime":1610228575670,"results":"35","hashOfConfig":"28"},{"size":1414,"mtime":1610230058260,"results":"36","hashOfConfig":"28"},{"size":2321,"mtime":1610228150020,"results":"37","hashOfConfig":"28"},{"size":324,"mtime":1610363045280,"results":"38","hashOfConfig":"28"},{"size":336,"mtime":1610217234760,"results":"39","hashOfConfig":"28"},{"size":192,"mtime":1608735457000,"results":"40","hashOfConfig":"28"},{"size":106,"mtime":1608725962360,"results":"41","hashOfConfig":"28"},{"size":110,"mtime":1609164983990,"results":"42","hashOfConfig":"28"},{"size":443,"mtime":1608725962360,"results":"43","hashOfConfig":"28"},{"size":3014,"mtime":1610217234750,"results":"44","hashOfConfig":"28"},{"size":2633,"mtime":1610363312660,"results":"45","hashOfConfig":"28"},{"size":1976,"mtime":1610367483660,"results":"46","hashOfConfig":"28"},{"size":3008,"mtime":1610367483660,"results":"47","hashOfConfig":"28"},{"size":1946,"mtime":1610363045280,"results":"48","hashOfConfig":"28"},{"size":1123,"mtime":1610367483660,"results":"49","hashOfConfig":"28"},{"size":1359,"mtime":1610367483660,"results":"50","hashOfConfig":"28"},{"size":973,"mtime":1610367483660,"results":"51","hashOfConfig":"28"},{"size":684,"mtime":1610363045280,"results":"52","hashOfConfig":"28"},{"size":3159,"mtime":1610385368560,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"1ohmvov",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"57"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"57"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"57"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/zmielone/fymate-configs/fymate/client/src/index.tsx",["114"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport dotenv from 'dotenv'\nimport './index.css'\n\nimport App from './App'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n",["115","116"],"/home/zmielone/fymate-configs/fymate/client/src/store.ts",[],"/home/zmielone/fymate-configs/fymate/client/src/App.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/features/auth/reducers.ts",["117","118","119","120","121"],"import jwt from 'jsonwebtoken'\nimport store from \"../../store\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { REPLACE_TOKENS, TokensActionTypes } from './types'\nimport { getRefreshToken } from \"./selectors\"\n\n\nconst initialState = {\n    accessToken: '',\n    refreshToken: '',\n    refreshTimeout: Infinity, // Time to token refresh\n    accessTimeout: Infinity, // Time to token refresh\n}\nlet refreshTimeoutID: NodeJS.Timeout | null = null;\n\n\n\nfunction silentRefresh() {\n\n}\n\n\nexport default (state = initialState, action: TokensActionTypes) => {\n    if (action.type === REPLACE_TOKENS) {\n        try {\n            const decodedAcc = jwt.decode(action.tokens.accessToken, {\n                complete: true,\n            }) as { [key: string]: any }\n            const decodedRef = jwt.decode(action.tokens.refreshToken, {\n                complete: true,\n            }) as { [key: string]: any }\n\n            if (refreshTimeoutID !== null)\n                clearTimeout(refreshTimeoutID);\n\n            console.log((decodedAcc.payload.exp * 1000 - Date.now()));\n            refreshTimeoutID = setTimeout(silentRefresh, 5000);\n\n            return {\n                ...state,\n                accessToken: action.tokens.accessToken,\n                refreshToken: action.tokens.refreshToken,\n                accessTimeout: decodedAcc.payload.exp,\n                refreshTimeout: decodedRef.payload.exp,\n            }\n        } catch {\n            if (refreshTimeoutID !== null)\n                clearTimeout(refreshTimeoutID);\n            // If there was an error with parsing the token, logout the user\n            return state\n        }\n    }\n    return state\n}\n","/home/zmielone/fymate-configs/fymate/client/src/pages/About.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/pages/Register.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/pages/Profile.tsx",["122"],"/home/zmielone/fymate-configs/fymate/client/src/components/Navigation.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/pages/Login.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/pages/AddPost.tsx",["123","124"],"import React, { Fragment } from 'react'\nimport { Button, FormControl, FormGroup, FormLabel } from 'react-bootstrap'\nimport LoginModal from '../components/loginModal/LoginModal'\nimport TagPanel from '../components/tags/TagPanel'\nimport { ITags, IPostPOST } from '../components/props/Interfaces'\n\nexport const AddPost: React.FC = () => {\n    //TAGS\n    const tags = [\n        {\n            \"tagid\": 1,\n            \"name\": \"Programista\"\n        },\n        {\n            \"tagid\": 2,\n            \"name\": \"Grafik\"\n        }\n    ]\n    //POST to POST HAAHAHAH\n    const PostPOST: IPostPOST = {\n        content: \"\",\n        title: \"\",\n        tagids: []\n    }\n\n    const getActiveTags: Function = (tags: ITags[]): void => {\n        var ids: number[] = []\n\n        tags.map(tag => {\n            ids.push(tag.tagid)\n        })\n        PostPOST.tagids = ids\n    }\n\n    //TODO SEND Post :)\n    const SendChanges = (): void => {\n        console.log(PostPOST)\n    }\n\n    return (\n        <Fragment>\n            <h1>ADD POST</h1>\n            <div className=\"add-post\">\n\n                <FormGroup>\n                    <FormLabel>Add your post title</FormLabel>\n                    <FormControl\n                        type=\"text\"\n                        onChange={e => PostPOST.title = e.target.value}\n                    ></FormControl>\n\n                </FormGroup>\n\n                <FormGroup>\n                    <FormLabel>Add tags to your posts this will help another find your offert</FormLabel>\n                </FormGroup>\n                <TagPanel tags={tags} updateTags={getActiveTags}></TagPanel>\n\n\n                <FormGroup>\n                    <FormLabel>Description your post</FormLabel>\n                    <FormControl\n                        as=\"textarea\"\n                        type=\"text\"\n                        onChange={e => PostPOST.content = e.target.value}\n                    >\n\n                    </FormControl>\n                </FormGroup>\n\n                <FormGroup>\n                    <Button\n                        className=\"btnFormSend\"\n                        variant=\"outline-success\"\n                        onClick={SendChanges}\n                    >\n                        Add Post\n                    </Button>\n                </FormGroup>\n\n            </div>\n\n        </Fragment >\n    )\n}\n","/home/zmielone/fymate-configs/fymate/client/src/pages/Home.tsx",["125"],"import React, { Fragment } from 'react'\nimport Counter from '../components/counter/Counter'\nimport LoginModal from '../components/loginModal/LoginModal'\nimport Board from '../components/search/Board'\n\nexport const Home: React.FC = () => {\n\n  return (\n    <Fragment>\n      <Board/>\n      <LoginModal />\n    </Fragment>\n  )\n}\n","/home/zmielone/fymate-configs/fymate/client/src/features/auth/types.ts",[],"/home/zmielone/fymate-configs/fymate/client/src/features/counter/index.ts",[],"/home/zmielone/fymate-configs/fymate/client/src/features/counter/actionTypes.ts",[],"/home/zmielone/fymate-configs/fymate/client/src/features/counter/selectors.ts",[],"/home/zmielone/fymate-configs/fymate/client/src/features/counter/counterReducer.ts",["126"],"import { INCREMENT_COUNTER, DECREMENT_COUNTER } from './actionTypes'\nimport { CounterActionTypes } from './types'\n\nconst initialState = {\n  value: 0,\n}\n\nexport default (state = initialState, action: CounterActionTypes) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return { ...state, value: state.value + 1 }\n    case DECREMENT_COUNTER:\n      return { ...state, value: state.value - 1 }\n    default:\n      return state\n  }\n}\n","/home/zmielone/fymate-configs/fymate/client/src/components/loginModal/LoginModal.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/components/Profile/EditProfile.tsx",["127","128","129"],"import React, { Fragment, useState } from 'react'\nimport { Form, FormControl, FormGroup, FormLabel, Button } from 'react-bootstrap'\nimport { IUser, ITags, IUserPOST } from '../props/Interfaces'\nimport TagPanel from '../tags/TagPanel'\n\ninterface Props {\n    user: IUser,\n    tags: ITags[]\n}\nconst EditProfile: React.FC<Props> = ({ user, tags }) => {\n\n    const UserPOST: IUserPOST = {\n        profileDescription: user.profiledescription,\n        visibleName: \"\",\n        telephone: user.phone,\n        contactEmail: user.email,\n        tagIDs: []\n    }\n\n    //TODO SEND User :)\n    const SendChanges = (): void => {\n        console.log(UserPOST)\n    }\n\n    const getActiveTags: Function = (tags: ITags[]): void => {\n        var ids: number[] = []\n\n        tags.map(tag => {\n            ids.push(tag.tagid)\n        })\n        UserPOST.tagIDs = ids\n    }\n\n    return (\n        <Fragment>\n            <div className=\"edit-profile\">\n                <FormGroup>\n                    <FormLabel> Your tags</FormLabel>\n                    <TagPanel tags={tags} updateTags={getActiveTags}></TagPanel>\n                </FormGroup>\n                <FormGroup>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl\n                        type=\"email\"\n                        placeholder={user.email}\n                        onChange={e => UserPOST.contactEmail = e.target.value}\n                    ></FormControl>\n\n                </FormGroup>\n                <FormGroup>\n                    <FormLabel>Telephone</FormLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={user.phone}\n                        onChange={e => UserPOST.telephone = e.target.value}\n                    >\n\n                    </FormControl>\n                </FormGroup>\n                <FormGroup>\n                    <FormLabel>Description</FormLabel>\n                    <FormLabel>Telephone</FormLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={user.profiledescription}\n                        onChange={e => UserPOST.profileDescription = e.target.value}\n                    ></FormControl>\n                </FormGroup>\n                <FormGroup>\n                    <Button\n                        className=\"btnFormSend\"\n                        variant=\"outline-success\"\n                        onClick={SendChanges}\n                    >\n                        Edit Profile\n                    </Button>\n                </FormGroup>\n\n            </div>\n        </Fragment>\n    )\n};\nexport default EditProfile","/home/zmielone/fymate-configs/fymate/client/src/components/search/PostBoard.tsx",["130","131"],"import React from 'react'\nimport { IPost, ITags,IUser } from '../props/Interfaces'\nimport Post from './Post'\nimport TagPanel from '../tags/TagPanel'\nimport { createExpressionWithTypeArguments } from 'typescript';\n\ninterface Props{\n    users: IUser[];\n    tags: ITags[];\n    posts: IPost[];\n    filtr?: ITags[];\n    edit?: Function;\n}\n\nconst PostBoard: React.FC<Props> = ({users,tags,posts,filtr,edit}) => {\n\n    const listPosts: Function = (): JSX.Element[] => \n    {\n        let postArr: IPost[] = []\n        let postJSX: JSX.Element[] = []\n        if(filtr !== undefined) \n        {\n            if(filtr.length !== 0){\n                posts.forEach(post => haveTag(post,filtr) ? postArr.push(post) : null);\n                postArr.sort((a,b) => countUserTags(b) - countUserTags(a));\n            }else{\n                posts.forEach(post => postArr.push(post));\n            } \n        }\n        else\n        {\n            posts.forEach(post => postArr.push(post));\n        }\n        postArr.forEach(post => edit === undefined \n            ? postJSX.push(<Post key={post.postid} tags={tags} post={post} users={users}/>)\n            : postJSX.push(<Post key={post.postid} tags={tags} post={post} users={users} edit={edit}/>)\n                );\n        return postJSX;\n    }\n\n    const haveTag: Function = (post:IPost,tags:ITags[]): boolean => \n    {\n        let have = false;\n        post.tagids.forEach(tagId => \n            tags.forEach(tag => \n                tag.tagid === tagId ? have = true : null)\n            );\n        return have;\n    }\n\n    const countUserTags: Function = (post: IPost): number =>\n    {\n        let counter = 0;\n        if(filtr === undefined) return 0;\n        filtr.forEach(tag => post.tagids.includes(tag.tagid) ? counter++ : null)\n        return counter;\n    }\n\n    return(<div>{listPosts()}</div>)\n    //How call edit function \n    //<Post post={posts[0]} tags={tags} users={users} edit={() => console.log(\"Edit\")}/>\n};\nexport default PostBoard","/home/zmielone/fymate-configs/fymate/client/src/components/search/Board.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/components/tags/TagPanel.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/components/search/Post.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/components/search/UserBoard.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/components/tags/TagList.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/components/search/UserCard.tsx",[],"/home/zmielone/fymate-configs/fymate/client/src/pages/EditPost.tsx",["132"],{"ruleId":"133","severity":1,"message":"134","line":5,"column":8,"nodeType":"135","messageId":"136","endLine":5,"endColumn":14},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"133","severity":1,"message":"141","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":13},{"ruleId":"133","severity":1,"message":"142","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":21},{"ruleId":"133","severity":1,"message":"143","line":3,"column":23,"nodeType":"135","messageId":"136","endLine":3,"endColumn":34},{"ruleId":"133","severity":1,"message":"144","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":25},{"ruleId":"145","severity":1,"message":"146","line":23,"column":1,"nodeType":"147","endLine":54,"endColumn":2},{"ruleId":"133","severity":1,"message":"148","line":1,"column":27,"nodeType":"135","messageId":"136","endLine":1,"endColumn":35},{"ruleId":"133","severity":1,"message":"149","line":3,"column":8,"nodeType":"135","messageId":"136","endLine":3,"endColumn":18},{"ruleId":"150","severity":1,"message":"151","line":29,"column":22,"nodeType":"152","messageId":"153","endLine":29,"endColumn":24},{"ruleId":"133","severity":1,"message":"154","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":15},{"ruleId":"145","severity":1,"message":"146","line":8,"column":1,"nodeType":"147","endLine":17,"endColumn":2},{"ruleId":"133","severity":1,"message":"148","line":1,"column":27,"nodeType":"135","messageId":"136","endLine":1,"endColumn":35},{"ruleId":"133","severity":1,"message":"155","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"151","line":28,"column":22,"nodeType":"152","messageId":"153","endLine":28,"endColumn":24},{"ruleId":"133","severity":1,"message":"156","line":4,"column":8,"nodeType":"135","messageId":"136","endLine":4,"endColumn":16},{"ruleId":"133","severity":1,"message":"157","line":5,"column":10,"nodeType":"135","messageId":"136","endLine":5,"endColumn":43},{"ruleId":"150","severity":1,"message":"151","line":34,"column":22,"nodeType":"152","messageId":"153","endLine":34,"endColumn":24},"@typescript-eslint/no-unused-vars","'dotenv' is defined but never used.","Identifier","unusedVar","no-native-reassign",["158"],"no-negated-in-lhs",["159"],"'store' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'getRefreshToken' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'useState' is defined but never used.","'LoginModal' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Counter' is defined but never used.","'Form' is defined but never used.","'TagPanel' is defined but never used.","'createExpressionWithTypeArguments' is defined but never used.","no-global-assign","no-unsafe-negation"]